// Generated by gencpp from file piper_msgs/GripperRequest.msg
// DO NOT EDIT!


#ifndef PIPER_MSGS_MESSAGE_GRIPPERREQUEST_H
#define PIPER_MSGS_MESSAGE_GRIPPERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piper_msgs
{
template <class ContainerAllocator>
struct GripperRequest_
{
  typedef GripperRequest_<ContainerAllocator> Type;

  GripperRequest_()
    : gripper_angle(0.0)
    , gripper_effort(0.0)
    , gripper_code(0)
    , set_zero(0)  {
    }
  GripperRequest_(const ContainerAllocator& _alloc)
    : gripper_angle(0.0)
    , gripper_effort(0.0)
    , gripper_code(0)
    , set_zero(0)  {
  (void)_alloc;
    }



   typedef double _gripper_angle_type;
  _gripper_angle_type gripper_angle;

   typedef double _gripper_effort_type;
  _gripper_effort_type gripper_effort;

   typedef int64_t _gripper_code_type;
  _gripper_code_type gripper_code;

   typedef int64_t _set_zero_type;
  _set_zero_type set_zero;





  typedef boost::shared_ptr< ::piper_msgs::GripperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piper_msgs::GripperRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperRequest_

typedef ::piper_msgs::GripperRequest_<std::allocator<void> > GripperRequest;

typedef boost::shared_ptr< ::piper_msgs::GripperRequest > GripperRequestPtr;
typedef boost::shared_ptr< ::piper_msgs::GripperRequest const> GripperRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piper_msgs::GripperRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piper_msgs::GripperRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piper_msgs::GripperRequest_<ContainerAllocator1> & lhs, const ::piper_msgs::GripperRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gripper_angle == rhs.gripper_angle &&
    lhs.gripper_effort == rhs.gripper_effort &&
    lhs.gripper_code == rhs.gripper_code &&
    lhs.set_zero == rhs.set_zero;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piper_msgs::GripperRequest_<ContainerAllocator1> & lhs, const ::piper_msgs::GripperRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::GripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::GripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::GripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::GripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::GripperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::GripperRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piper_msgs::GripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ca678d5b432300b1e4e715e302cbc4d";
  }

  static const char* value(const ::piper_msgs::GripperRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ca678d5b432300bULL;
  static const uint64_t static_value2 = 0x1e4e715e302cbc4dULL;
};

template<class ContainerAllocator>
struct DataType< ::piper_msgs::GripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piper_msgs/GripperRequest";
  }

  static const char* value(const ::piper_msgs::GripperRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piper_msgs::GripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gripper_angle\n"
"float64 gripper_effort\n"
"int64 gripper_code\n"
"int64 set_zero\n"
;
  }

  static const char* value(const ::piper_msgs::GripperRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piper_msgs::GripperRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gripper_angle);
      stream.next(m.gripper_effort);
      stream.next(m.gripper_code);
      stream.next(m.set_zero);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piper_msgs::GripperRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piper_msgs::GripperRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "gripper_angle: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_angle);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gripper_effort: ";
    Printer<double>::stream(s, indent + "  ", v.gripper_effort);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gripper_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gripper_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "set_zero: ";
    Printer<int64_t>::stream(s, indent + "  ", v.set_zero);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIPER_MSGS_MESSAGE_GRIPPERREQUEST_H
