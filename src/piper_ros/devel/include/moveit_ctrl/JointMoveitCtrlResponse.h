// Generated by gencpp from file moveit_ctrl/JointMoveitCtrlResponse.msg
// DO NOT EDIT!


#ifndef MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLRESPONSE_H
#define MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_ctrl
{
template <class ContainerAllocator>
struct JointMoveitCtrlResponse_
{
  typedef JointMoveitCtrlResponse_<ContainerAllocator> Type;

  JointMoveitCtrlResponse_()
    : error_code(0)
    , status(false)  {
    }
  JointMoveitCtrlResponse_(const ContainerAllocator& _alloc)
    : error_code(0)
    , status(false)  {
  (void)_alloc;
    }



   typedef int64_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct JointMoveitCtrlResponse_

typedef ::moveit_ctrl::JointMoveitCtrlResponse_<std::allocator<void> > JointMoveitCtrlResponse;

typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlResponse > JointMoveitCtrlResponsePtr;
typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlResponse const> JointMoveitCtrlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator1> & lhs, const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator1> & lhs, const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9d34df8e5b41682097c5aaf352d8349f";
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9d34df8e5b416820ULL;
  static const uint64_t static_value2 = 0x97c5aaf352d8349fULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_ctrl/JointMoveitCtrlResponse";
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 error_code\n"
"bool status\n"
;
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointMoveitCtrlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_ctrl::JointMoveitCtrlResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "error_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.error_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLRESPONSE_H
