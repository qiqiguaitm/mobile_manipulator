# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_ctrl/JointMoveitCtrlRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointMoveitCtrlRequest(genpy.Message):
  _md5sum = "a9687e2d218d71b19ceba55344df7891"
  _type = "moveit_ctrl/JointMoveitCtrlRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# JointMoveitCtrl.srv
float64[6] joint_states  # 关节弧度
float64 gripper # 夹爪张开宽度
float64[7] joint_endpose # 末端执行器位置控制(四元数)
float64 max_velocity # 最大速度
float64 max_acceleration # 最大加速度
"""
  __slots__ = ['joint_states','gripper','joint_endpose','max_velocity','max_acceleration']
  _slot_types = ['float64[6]','float64','float64[7]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint_states,gripper,joint_endpose,max_velocity,max_acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointMoveitCtrlRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint_states is None:
        self.joint_states = [0.] * 6
      if self.gripper is None:
        self.gripper = 0.
      if self.joint_endpose is None:
        self.joint_endpose = [0.] * 7
      if self.max_velocity is None:
        self.max_velocity = 0.
      if self.max_acceleration is None:
        self.max_acceleration = 0.
    else:
      self.joint_states = [0.] * 6
      self.gripper = 0.
      self.joint_endpose = [0.] * 7
      self.max_velocity = 0.
      self.max_acceleration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_6d().pack(*self.joint_states))
      _x = self.gripper
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_7d().pack(*self.joint_endpose))
      _x = self
      buff.write(_get_struct_2d().pack(_x.max_velocity, _x.max_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 48
      self.joint_states = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 8
      (self.gripper,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_endpose = _get_struct_7d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.max_velocity, _x.max_acceleration,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.joint_states.tostring())
      _x = self.gripper
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.joint_endpose.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.max_velocity, _x.max_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 48
      self.joint_states = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      start = end
      end += 8
      (self.gripper,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 56
      self.joint_endpose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=7)
      _x = self
      start = end
      end += 16
      (_x.max_velocity, _x.max_acceleration,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from moveit_ctrl/JointMoveitCtrlResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JointMoveitCtrlResponse(genpy.Message):
  _md5sum = "9d34df8e5b41682097c5aaf352d8349f"
  _type = "moveit_ctrl/JointMoveitCtrlResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 error_code
bool status
"""
  __slots__ = ['error_code','status']
  _slot_types = ['int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_code,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointMoveitCtrlResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.error_code is None:
        self.error_code = 0
      if self.status is None:
        self.status = False
    else:
      self.error_code = 0
      self.status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_qB().pack(_x.error_code, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.error_code, _x.status,) = _get_struct_qB().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_qB().pack(_x.error_code, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.error_code, _x.status,) = _get_struct_qB().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qB = None
def _get_struct_qB():
    global _struct_qB
    if _struct_qB is None:
        _struct_qB = struct.Struct("<qB")
    return _struct_qB
class JointMoveitCtrl(object):
  _type          = 'moveit_ctrl/JointMoveitCtrl'
  _md5sum = '51cb988f5ae355fbe239bcbc18431f99'
  _request_class  = JointMoveitCtrlRequest
  _response_class = JointMoveitCtrlResponse
