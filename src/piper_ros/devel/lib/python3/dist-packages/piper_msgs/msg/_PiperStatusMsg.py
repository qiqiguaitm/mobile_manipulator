# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piper_msgs/PiperStatusMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PiperStatusMsg(genpy.Message):
  _md5sum = "18e0aaa943372aaa58f1495907dd9a17"
  _type = "piper_msgs/PiperStatusMsg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 ctrl_mode
uint8 arm_status
uint8 mode_feedback
uint8 teach_status
uint8 motion_status
uint8 trajectory_num
int64 err_code
bool joint_1_angle_limit
bool joint_2_angle_limit
bool joint_3_angle_limit
bool joint_4_angle_limit
bool joint_5_angle_limit
bool joint_6_angle_limit
bool communication_status_joint_1
bool communication_status_joint_2
bool communication_status_joint_3
bool communication_status_joint_4
bool communication_status_joint_5
bool communication_status_joint_6

"""
  __slots__ = ['ctrl_mode','arm_status','mode_feedback','teach_status','motion_status','trajectory_num','err_code','joint_1_angle_limit','joint_2_angle_limit','joint_3_angle_limit','joint_4_angle_limit','joint_5_angle_limit','joint_6_angle_limit','communication_status_joint_1','communication_status_joint_2','communication_status_joint_3','communication_status_joint_4','communication_status_joint_5','communication_status_joint_6']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','int64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctrl_mode,arm_status,mode_feedback,teach_status,motion_status,trajectory_num,err_code,joint_1_angle_limit,joint_2_angle_limit,joint_3_angle_limit,joint_4_angle_limit,joint_5_angle_limit,joint_6_angle_limit,communication_status_joint_1,communication_status_joint_2,communication_status_joint_3,communication_status_joint_4,communication_status_joint_5,communication_status_joint_6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PiperStatusMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ctrl_mode is None:
        self.ctrl_mode = 0
      if self.arm_status is None:
        self.arm_status = 0
      if self.mode_feedback is None:
        self.mode_feedback = 0
      if self.teach_status is None:
        self.teach_status = 0
      if self.motion_status is None:
        self.motion_status = 0
      if self.trajectory_num is None:
        self.trajectory_num = 0
      if self.err_code is None:
        self.err_code = 0
      if self.joint_1_angle_limit is None:
        self.joint_1_angle_limit = False
      if self.joint_2_angle_limit is None:
        self.joint_2_angle_limit = False
      if self.joint_3_angle_limit is None:
        self.joint_3_angle_limit = False
      if self.joint_4_angle_limit is None:
        self.joint_4_angle_limit = False
      if self.joint_5_angle_limit is None:
        self.joint_5_angle_limit = False
      if self.joint_6_angle_limit is None:
        self.joint_6_angle_limit = False
      if self.communication_status_joint_1 is None:
        self.communication_status_joint_1 = False
      if self.communication_status_joint_2 is None:
        self.communication_status_joint_2 = False
      if self.communication_status_joint_3 is None:
        self.communication_status_joint_3 = False
      if self.communication_status_joint_4 is None:
        self.communication_status_joint_4 = False
      if self.communication_status_joint_5 is None:
        self.communication_status_joint_5 = False
      if self.communication_status_joint_6 is None:
        self.communication_status_joint_6 = False
    else:
      self.ctrl_mode = 0
      self.arm_status = 0
      self.mode_feedback = 0
      self.teach_status = 0
      self.motion_status = 0
      self.trajectory_num = 0
      self.err_code = 0
      self.joint_1_angle_limit = False
      self.joint_2_angle_limit = False
      self.joint_3_angle_limit = False
      self.joint_4_angle_limit = False
      self.joint_5_angle_limit = False
      self.joint_6_angle_limit = False
      self.communication_status_joint_1 = False
      self.communication_status_joint_2 = False
      self.communication_status_joint_3 = False
      self.communication_status_joint_4 = False
      self.communication_status_joint_5 = False
      self.communication_status_joint_6 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6Bq12B().pack(_x.ctrl_mode, _x.arm_status, _x.mode_feedback, _x.teach_status, _x.motion_status, _x.trajectory_num, _x.err_code, _x.joint_1_angle_limit, _x.joint_2_angle_limit, _x.joint_3_angle_limit, _x.joint_4_angle_limit, _x.joint_5_angle_limit, _x.joint_6_angle_limit, _x.communication_status_joint_1, _x.communication_status_joint_2, _x.communication_status_joint_3, _x.communication_status_joint_4, _x.communication_status_joint_5, _x.communication_status_joint_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.ctrl_mode, _x.arm_status, _x.mode_feedback, _x.teach_status, _x.motion_status, _x.trajectory_num, _x.err_code, _x.joint_1_angle_limit, _x.joint_2_angle_limit, _x.joint_3_angle_limit, _x.joint_4_angle_limit, _x.joint_5_angle_limit, _x.joint_6_angle_limit, _x.communication_status_joint_1, _x.communication_status_joint_2, _x.communication_status_joint_3, _x.communication_status_joint_4, _x.communication_status_joint_5, _x.communication_status_joint_6,) = _get_struct_6Bq12B().unpack(str[start:end])
      self.joint_1_angle_limit = bool(self.joint_1_angle_limit)
      self.joint_2_angle_limit = bool(self.joint_2_angle_limit)
      self.joint_3_angle_limit = bool(self.joint_3_angle_limit)
      self.joint_4_angle_limit = bool(self.joint_4_angle_limit)
      self.joint_5_angle_limit = bool(self.joint_5_angle_limit)
      self.joint_6_angle_limit = bool(self.joint_6_angle_limit)
      self.communication_status_joint_1 = bool(self.communication_status_joint_1)
      self.communication_status_joint_2 = bool(self.communication_status_joint_2)
      self.communication_status_joint_3 = bool(self.communication_status_joint_3)
      self.communication_status_joint_4 = bool(self.communication_status_joint_4)
      self.communication_status_joint_5 = bool(self.communication_status_joint_5)
      self.communication_status_joint_6 = bool(self.communication_status_joint_6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6Bq12B().pack(_x.ctrl_mode, _x.arm_status, _x.mode_feedback, _x.teach_status, _x.motion_status, _x.trajectory_num, _x.err_code, _x.joint_1_angle_limit, _x.joint_2_angle_limit, _x.joint_3_angle_limit, _x.joint_4_angle_limit, _x.joint_5_angle_limit, _x.joint_6_angle_limit, _x.communication_status_joint_1, _x.communication_status_joint_2, _x.communication_status_joint_3, _x.communication_status_joint_4, _x.communication_status_joint_5, _x.communication_status_joint_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.ctrl_mode, _x.arm_status, _x.mode_feedback, _x.teach_status, _x.motion_status, _x.trajectory_num, _x.err_code, _x.joint_1_angle_limit, _x.joint_2_angle_limit, _x.joint_3_angle_limit, _x.joint_4_angle_limit, _x.joint_5_angle_limit, _x.joint_6_angle_limit, _x.communication_status_joint_1, _x.communication_status_joint_2, _x.communication_status_joint_3, _x.communication_status_joint_4, _x.communication_status_joint_5, _x.communication_status_joint_6,) = _get_struct_6Bq12B().unpack(str[start:end])
      self.joint_1_angle_limit = bool(self.joint_1_angle_limit)
      self.joint_2_angle_limit = bool(self.joint_2_angle_limit)
      self.joint_3_angle_limit = bool(self.joint_3_angle_limit)
      self.joint_4_angle_limit = bool(self.joint_4_angle_limit)
      self.joint_5_angle_limit = bool(self.joint_5_angle_limit)
      self.joint_6_angle_limit = bool(self.joint_6_angle_limit)
      self.communication_status_joint_1 = bool(self.communication_status_joint_1)
      self.communication_status_joint_2 = bool(self.communication_status_joint_2)
      self.communication_status_joint_3 = bool(self.communication_status_joint_3)
      self.communication_status_joint_4 = bool(self.communication_status_joint_4)
      self.communication_status_joint_5 = bool(self.communication_status_joint_5)
      self.communication_status_joint_6 = bool(self.communication_status_joint_6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6Bq12B = None
def _get_struct_6Bq12B():
    global _struct_6Bq12B
    if _struct_6Bq12B is None:
        _struct_6Bq12B = struct.Struct("<6Bq12B")
    return _struct_6Bq12B
