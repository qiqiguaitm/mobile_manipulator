// Generated by gencpp from file task_mgr/task_mgr.msg
// DO NOT EDIT!


#ifndef TASK_MGR_MESSAGE_TASK_MGR_H
#define TASK_MGR_MESSAGE_TASK_MGR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace task_mgr
{
template <class ContainerAllocator>
struct task_mgr_
{
  typedef task_mgr_<ContainerAllocator> Type;

  task_mgr_()
    : fsm_state()
    , task_list()
    , cur_task_id()
    , cur_task_name()
    , cur_stage()
    , cur_goal()
    , target_object()  {
    }
  task_mgr_(const ContainerAllocator& _alloc)
    : fsm_state(_alloc)
    , task_list(_alloc)
    , cur_task_id(_alloc)
    , cur_task_name(_alloc)
    , cur_stage(_alloc)
    , cur_goal(_alloc)
    , target_object(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fsm_state_type;
  _fsm_state_type fsm_state;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _task_list_type;
  _task_list_type task_list;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cur_task_id_type;
  _cur_task_id_type cur_task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cur_task_name_type;
  _cur_task_name_type cur_task_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cur_stage_type;
  _cur_stage_type cur_stage;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _cur_goal_type;
  _cur_goal_type cur_goal;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_object_type;
  _target_object_type target_object;





  typedef boost::shared_ptr< ::task_mgr::task_mgr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::task_mgr::task_mgr_<ContainerAllocator> const> ConstPtr;

}; // struct task_mgr_

typedef ::task_mgr::task_mgr_<std::allocator<void> > task_mgr;

typedef boost::shared_ptr< ::task_mgr::task_mgr > task_mgrPtr;
typedef boost::shared_ptr< ::task_mgr::task_mgr const> task_mgrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::task_mgr::task_mgr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::task_mgr::task_mgr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::task_mgr::task_mgr_<ContainerAllocator1> & lhs, const ::task_mgr::task_mgr_<ContainerAllocator2> & rhs)
{
  return lhs.fsm_state == rhs.fsm_state &&
    lhs.task_list == rhs.task_list &&
    lhs.cur_task_id == rhs.cur_task_id &&
    lhs.cur_task_name == rhs.cur_task_name &&
    lhs.cur_stage == rhs.cur_stage &&
    lhs.cur_goal == rhs.cur_goal &&
    lhs.target_object == rhs.target_object;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::task_mgr::task_mgr_<ContainerAllocator1> & lhs, const ::task_mgr::task_mgr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace task_mgr

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::task_mgr::task_mgr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::task_mgr::task_mgr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_mgr::task_mgr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::task_mgr::task_mgr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_mgr::task_mgr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::task_mgr::task_mgr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::task_mgr::task_mgr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85e6602b4a8e4a88f3d67a09ef6bcc82";
  }

  static const char* value(const ::task_mgr::task_mgr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85e6602b4a8e4a88ULL;
  static const uint64_t static_value2 = 0xf3d67a09ef6bcc82ULL;
};

template<class ContainerAllocator>
struct DataType< ::task_mgr::task_mgr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "task_mgr/task_mgr";
  }

  static const char* value(const ::task_mgr::task_mgr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::task_mgr::task_mgr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string fsm_state\n"
"string[] task_list\n"
"string cur_task_id\n"
"string cur_task_name\n"
"string cur_stage\n"
"string cur_goal\n"
"string target_object\n"
;
  }

  static const char* value(const ::task_mgr::task_mgr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::task_mgr::task_mgr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fsm_state);
      stream.next(m.task_list);
      stream.next(m.cur_task_id);
      stream.next(m.cur_task_name);
      stream.next(m.cur_stage);
      stream.next(m.cur_goal);
      stream.next(m.target_object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_mgr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::task_mgr::task_mgr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::task_mgr::task_mgr_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "fsm_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fsm_state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "task_list: ";
    if (v.task_list.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.task_list.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.task_list[i]);
    }
    if (v.task_list.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cur_task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cur_task_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cur_task_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cur_task_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cur_stage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cur_stage);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cur_goal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.cur_goal);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "target_object: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TASK_MGR_MESSAGE_TASK_MGR_H
