// Generated by gencpp from file moveit_ctrl/JointMoveitCtrlRequest.msg
// DO NOT EDIT!


#ifndef MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLREQUEST_H
#define MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace moveit_ctrl
{
template <class ContainerAllocator>
struct JointMoveitCtrlRequest_
{
  typedef JointMoveitCtrlRequest_<ContainerAllocator> Type;

  JointMoveitCtrlRequest_()
    : joint_states()
    , gripper(0.0)
    , joint_endpose()
    , max_velocity(0.0)
    , max_acceleration(0.0)  {
      joint_states.assign(0.0);

      joint_endpose.assign(0.0);
  }
  JointMoveitCtrlRequest_(const ContainerAllocator& _alloc)
    : joint_states()
    , gripper(0.0)
    , joint_endpose()
    , max_velocity(0.0)
    , max_acceleration(0.0)  {
  (void)_alloc;
      joint_states.assign(0.0);

      joint_endpose.assign(0.0);
  }



   typedef boost::array<double, 6>  _joint_states_type;
  _joint_states_type joint_states;

   typedef double _gripper_type;
  _gripper_type gripper;

   typedef boost::array<double, 7>  _joint_endpose_type;
  _joint_endpose_type joint_endpose;

   typedef double _max_velocity_type;
  _max_velocity_type max_velocity;

   typedef double _max_acceleration_type;
  _max_acceleration_type max_acceleration;





  typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointMoveitCtrlRequest_

typedef ::moveit_ctrl::JointMoveitCtrlRequest_<std::allocator<void> > JointMoveitCtrlRequest;

typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlRequest > JointMoveitCtrlRequestPtr;
typedef boost::shared_ptr< ::moveit_ctrl::JointMoveitCtrlRequest const> JointMoveitCtrlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator1> & lhs, const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_states == rhs.joint_states &&
    lhs.gripper == rhs.gripper &&
    lhs.joint_endpose == rhs.joint_endpose &&
    lhs.max_velocity == rhs.max_velocity &&
    lhs.max_acceleration == rhs.max_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator1> & lhs, const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9687e2d218d71b19ceba55344df7891";
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9687e2d218d71b1ULL;
  static const uint64_t static_value2 = 0x9ceba55344df7891ULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_ctrl/JointMoveitCtrlRequest";
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# JointMoveitCtrl.srv\n"
"float64[6] joint_states  # 关节弧度\n"
"float64 gripper # 夹爪张开宽度\n"
"float64[7] joint_endpose # 末端执行器位置控制(四元数)\n"
"float64 max_velocity # 最大速度\n"
"float64 max_acceleration # 最大加速度\n"
;
  }

  static const char* value(const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_states);
      stream.next(m.gripper);
      stream.next(m.joint_endpose);
      stream.next(m.max_velocity);
      stream.next(m.max_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointMoveitCtrlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_ctrl::JointMoveitCtrlRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "joint_states: ";
    if (v.joint_states.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_states.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.joint_states[i]);
    }
    if (v.joint_states.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gripper: ";
    Printer<double>::stream(s, indent + "  ", v.gripper);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_endpose: ";
    if (v.joint_endpose.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_endpose.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.joint_endpose[i]);
    }
    if (v.joint_endpose.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.max_velocity);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_CTRL_MESSAGE_JOINTMOVEITCTRLREQUEST_H
