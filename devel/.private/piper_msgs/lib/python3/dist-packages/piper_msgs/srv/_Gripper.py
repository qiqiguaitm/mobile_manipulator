# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piper_msgs/GripperRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GripperRequest(genpy.Message):
  _md5sum = "7ca678d5b432300b1e4e715e302cbc4d"
  _type = "piper_msgs/GripperRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 gripper_angle
float64 gripper_effort
int64 gripper_code
int64 set_zero
"""
  __slots__ = ['gripper_angle','gripper_effort','gripper_code','set_zero']
  _slot_types = ['float64','float64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gripper_angle,gripper_effort,gripper_code,set_zero

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GripperRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gripper_angle is None:
        self.gripper_angle = 0.
      if self.gripper_effort is None:
        self.gripper_effort = 0.
      if self.gripper_code is None:
        self.gripper_code = 0
      if self.set_zero is None:
        self.set_zero = 0
    else:
      self.gripper_angle = 0.
      self.gripper_effort = 0.
      self.gripper_code = 0
      self.set_zero = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d2q().pack(_x.gripper_angle, _x.gripper_effort, _x.gripper_code, _x.set_zero))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.gripper_angle, _x.gripper_effort, _x.gripper_code, _x.set_zero,) = _get_struct_2d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d2q().pack(_x.gripper_angle, _x.gripper_effort, _x.gripper_code, _x.set_zero))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.gripper_angle, _x.gripper_effort, _x.gripper_code, _x.set_zero,) = _get_struct_2d2q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d2q = None
def _get_struct_2d2q():
    global _struct_2d2q
    if _struct_2d2q is None:
        _struct_2d2q = struct.Struct("<2d2q")
    return _struct_2d2q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from piper_msgs/GripperResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GripperResponse(genpy.Message):
  _md5sum = "34441fad838c25a9993eed8255bd6e41"
  _type = "piper_msgs/GripperResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 code
bool status  # 响应消息类型为bool
"""
  __slots__ = ['code','status']
  _slot_types = ['int64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       code,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GripperResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.code is None:
        self.code = 0
      if self.status is None:
        self.status = False
    else:
      self.code = 0
      self.status = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_qB().pack(_x.code, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.code, _x.status,) = _get_struct_qB().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_qB().pack(_x.code, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.code, _x.status,) = _get_struct_qB().unpack(str[start:end])
      self.status = bool(self.status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qB = None
def _get_struct_qB():
    global _struct_qB
    if _struct_qB is None:
        _struct_qB = struct.Struct("<qB")
    return _struct_qB
class Gripper(object):
  _type          = 'piper_msgs/Gripper'
  _md5sum = 'fca0ae84ccaed9dee57e974f132f6119'
  _request_class  = GripperRequest
  _response_class = GripperResponse
