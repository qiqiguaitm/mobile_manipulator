// Generated by gencpp from file piper_msgs/PiperStatusMsg.msg
// DO NOT EDIT!


#ifndef PIPER_MSGS_MESSAGE_PIPERSTATUSMSG_H
#define PIPER_MSGS_MESSAGE_PIPERSTATUSMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piper_msgs
{
template <class ContainerAllocator>
struct PiperStatusMsg_
{
  typedef PiperStatusMsg_<ContainerAllocator> Type;

  PiperStatusMsg_()
    : ctrl_mode(0)
    , arm_status(0)
    , mode_feedback(0)
    , teach_status(0)
    , motion_status(0)
    , trajectory_num(0)
    , err_code(0)
    , joint_1_angle_limit(false)
    , joint_2_angle_limit(false)
    , joint_3_angle_limit(false)
    , joint_4_angle_limit(false)
    , joint_5_angle_limit(false)
    , joint_6_angle_limit(false)
    , communication_status_joint_1(false)
    , communication_status_joint_2(false)
    , communication_status_joint_3(false)
    , communication_status_joint_4(false)
    , communication_status_joint_5(false)
    , communication_status_joint_6(false)  {
    }
  PiperStatusMsg_(const ContainerAllocator& _alloc)
    : ctrl_mode(0)
    , arm_status(0)
    , mode_feedback(0)
    , teach_status(0)
    , motion_status(0)
    , trajectory_num(0)
    , err_code(0)
    , joint_1_angle_limit(false)
    , joint_2_angle_limit(false)
    , joint_3_angle_limit(false)
    , joint_4_angle_limit(false)
    , joint_5_angle_limit(false)
    , joint_6_angle_limit(false)
    , communication_status_joint_1(false)
    , communication_status_joint_2(false)
    , communication_status_joint_3(false)
    , communication_status_joint_4(false)
    , communication_status_joint_5(false)
    , communication_status_joint_6(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef uint8_t _arm_status_type;
  _arm_status_type arm_status;

   typedef uint8_t _mode_feedback_type;
  _mode_feedback_type mode_feedback;

   typedef uint8_t _teach_status_type;
  _teach_status_type teach_status;

   typedef uint8_t _motion_status_type;
  _motion_status_type motion_status;

   typedef uint8_t _trajectory_num_type;
  _trajectory_num_type trajectory_num;

   typedef int64_t _err_code_type;
  _err_code_type err_code;

   typedef uint8_t _joint_1_angle_limit_type;
  _joint_1_angle_limit_type joint_1_angle_limit;

   typedef uint8_t _joint_2_angle_limit_type;
  _joint_2_angle_limit_type joint_2_angle_limit;

   typedef uint8_t _joint_3_angle_limit_type;
  _joint_3_angle_limit_type joint_3_angle_limit;

   typedef uint8_t _joint_4_angle_limit_type;
  _joint_4_angle_limit_type joint_4_angle_limit;

   typedef uint8_t _joint_5_angle_limit_type;
  _joint_5_angle_limit_type joint_5_angle_limit;

   typedef uint8_t _joint_6_angle_limit_type;
  _joint_6_angle_limit_type joint_6_angle_limit;

   typedef uint8_t _communication_status_joint_1_type;
  _communication_status_joint_1_type communication_status_joint_1;

   typedef uint8_t _communication_status_joint_2_type;
  _communication_status_joint_2_type communication_status_joint_2;

   typedef uint8_t _communication_status_joint_3_type;
  _communication_status_joint_3_type communication_status_joint_3;

   typedef uint8_t _communication_status_joint_4_type;
  _communication_status_joint_4_type communication_status_joint_4;

   typedef uint8_t _communication_status_joint_5_type;
  _communication_status_joint_5_type communication_status_joint_5;

   typedef uint8_t _communication_status_joint_6_type;
  _communication_status_joint_6_type communication_status_joint_6;





  typedef boost::shared_ptr< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PiperStatusMsg_

typedef ::piper_msgs::PiperStatusMsg_<std::allocator<void> > PiperStatusMsg;

typedef boost::shared_ptr< ::piper_msgs::PiperStatusMsg > PiperStatusMsgPtr;
typedef boost::shared_ptr< ::piper_msgs::PiperStatusMsg const> PiperStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piper_msgs::PiperStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piper_msgs::PiperStatusMsg_<ContainerAllocator1> & lhs, const ::piper_msgs::PiperStatusMsg_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_mode == rhs.ctrl_mode &&
    lhs.arm_status == rhs.arm_status &&
    lhs.mode_feedback == rhs.mode_feedback &&
    lhs.teach_status == rhs.teach_status &&
    lhs.motion_status == rhs.motion_status &&
    lhs.trajectory_num == rhs.trajectory_num &&
    lhs.err_code == rhs.err_code &&
    lhs.joint_1_angle_limit == rhs.joint_1_angle_limit &&
    lhs.joint_2_angle_limit == rhs.joint_2_angle_limit &&
    lhs.joint_3_angle_limit == rhs.joint_3_angle_limit &&
    lhs.joint_4_angle_limit == rhs.joint_4_angle_limit &&
    lhs.joint_5_angle_limit == rhs.joint_5_angle_limit &&
    lhs.joint_6_angle_limit == rhs.joint_6_angle_limit &&
    lhs.communication_status_joint_1 == rhs.communication_status_joint_1 &&
    lhs.communication_status_joint_2 == rhs.communication_status_joint_2 &&
    lhs.communication_status_joint_3 == rhs.communication_status_joint_3 &&
    lhs.communication_status_joint_4 == rhs.communication_status_joint_4 &&
    lhs.communication_status_joint_5 == rhs.communication_status_joint_5 &&
    lhs.communication_status_joint_6 == rhs.communication_status_joint_6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piper_msgs::PiperStatusMsg_<ContainerAllocator1> & lhs, const ::piper_msgs::PiperStatusMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18e0aaa943372aaa58f1495907dd9a17";
  }

  static const char* value(const ::piper_msgs::PiperStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18e0aaa943372aaaULL;
  static const uint64_t static_value2 = 0x58f1495907dd9a17ULL;
};

template<class ContainerAllocator>
struct DataType< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piper_msgs/PiperStatusMsg";
  }

  static const char* value(const ::piper_msgs::PiperStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ctrl_mode\n"
"uint8 arm_status\n"
"uint8 mode_feedback\n"
"uint8 teach_status\n"
"uint8 motion_status\n"
"uint8 trajectory_num\n"
"int64 err_code\n"
"bool joint_1_angle_limit\n"
"bool joint_2_angle_limit\n"
"bool joint_3_angle_limit\n"
"bool joint_4_angle_limit\n"
"bool joint_5_angle_limit\n"
"bool joint_6_angle_limit\n"
"bool communication_status_joint_1\n"
"bool communication_status_joint_2\n"
"bool communication_status_joint_3\n"
"bool communication_status_joint_4\n"
"bool communication_status_joint_5\n"
"bool communication_status_joint_6\n"
"\n"
;
  }

  static const char* value(const ::piper_msgs::PiperStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_mode);
      stream.next(m.arm_status);
      stream.next(m.mode_feedback);
      stream.next(m.teach_status);
      stream.next(m.motion_status);
      stream.next(m.trajectory_num);
      stream.next(m.err_code);
      stream.next(m.joint_1_angle_limit);
      stream.next(m.joint_2_angle_limit);
      stream.next(m.joint_3_angle_limit);
      stream.next(m.joint_4_angle_limit);
      stream.next(m.joint_5_angle_limit);
      stream.next(m.joint_6_angle_limit);
      stream.next(m.communication_status_joint_1);
      stream.next(m.communication_status_joint_2);
      stream.next(m.communication_status_joint_3);
      stream.next(m.communication_status_joint_4);
      stream.next(m.communication_status_joint_5);
      stream.next(m.communication_status_joint_6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PiperStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piper_msgs::PiperStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piper_msgs::PiperStatusMsg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "ctrl_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ctrl_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "arm_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode_feedback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_feedback);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "teach_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.teach_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motion_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motion_status);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "trajectory_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trajectory_num);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "err_code: ";
    Printer<int64_t>::stream(s, indent + "  ", v.err_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_1_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_1_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_2_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_2_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_3_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_3_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_4_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_4_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_5_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_5_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_6_angle_limit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_6_angle_limit);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_1);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_3);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_4);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_5);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "communication_status_joint_6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.communication_status_joint_6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIPER_MSGS_MESSAGE_PIPERSTATUSMSG_H
