// Generated by gencpp from file piper_msgs/PiperEulerPose.msg
// DO NOT EDIT!


#ifndef PIPER_MSGS_MESSAGE_PIPEREULERPOSE_H
#define PIPER_MSGS_MESSAGE_PIPEREULERPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piper_msgs
{
template <class ContainerAllocator>
struct PiperEulerPose_
{
  typedef PiperEulerPose_<ContainerAllocator> Type;

  PiperEulerPose_()
    : header()
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  PiperEulerPose_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::piper_msgs::PiperEulerPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piper_msgs::PiperEulerPose_<ContainerAllocator> const> ConstPtr;

}; // struct PiperEulerPose_

typedef ::piper_msgs::PiperEulerPose_<std::allocator<void> > PiperEulerPose;

typedef boost::shared_ptr< ::piper_msgs::PiperEulerPose > PiperEulerPosePtr;
typedef boost::shared_ptr< ::piper_msgs::PiperEulerPose const> PiperEulerPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piper_msgs::PiperEulerPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::piper_msgs::PiperEulerPose_<ContainerAllocator1> & lhs, const ::piper_msgs::PiperEulerPose_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::piper_msgs::PiperEulerPose_<ContainerAllocator1> & lhs, const ::piper_msgs::PiperEulerPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace piper_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piper_msgs::PiperEulerPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piper_msgs::PiperEulerPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piper_msgs::PiperEulerPose_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "912b09bef977d03d7296be79c4b6eed3";
  }

  static const char* value(const ::piper_msgs::PiperEulerPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x912b09bef977d03dULL;
  static const uint64_t static_value2 = 0x7296be79c4b6eed3ULL;
};

template<class ContainerAllocator>
struct DataType< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piper_msgs/PiperEulerPose";
  }

  static const char* value(const ::piper_msgs::PiperEulerPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::piper_msgs::PiperEulerPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PiperEulerPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piper_msgs::PiperEulerPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piper_msgs::PiperEulerPose_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIPER_MSGS_MESSAGE_PIPEREULERPOSE_H
