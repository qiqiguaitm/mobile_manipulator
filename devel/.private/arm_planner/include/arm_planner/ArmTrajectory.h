// Generated by gencpp from file arm_planner/ArmTrajectory.msg
// DO NOT EDIT!


#ifndef ARM_PLANNER_MESSAGE_ARMTRAJECTORY_H
#define ARM_PLANNER_MESSAGE_ARMTRAJECTORY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <trajectory_msgs/JointTrajectoryPoint.h>
#include <geometry_msgs/Pose.h>

namespace arm_planner
{
template <class ContainerAllocator>
struct ArmTrajectory_
{
  typedef ArmTrajectory_<ContainerAllocator> Type;

  ArmTrajectory_()
    : header()
    , joint_names()
    , points()
    , end_pose()  {
    }
  ArmTrajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , points(_alloc)
    , end_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _end_pose_type;
  _end_pose_type end_pose;





  typedef boost::shared_ptr< ::arm_planner::ArmTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_planner::ArmTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct ArmTrajectory_

typedef ::arm_planner::ArmTrajectory_<std::allocator<void> > ArmTrajectory;

typedef boost::shared_ptr< ::arm_planner::ArmTrajectory > ArmTrajectoryPtr;
typedef boost::shared_ptr< ::arm_planner::ArmTrajectory const> ArmTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_planner::ArmTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_planner::ArmTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_planner::ArmTrajectory_<ContainerAllocator1> & lhs, const ::arm_planner::ArmTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.points == rhs.points &&
    lhs.end_pose == rhs.end_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_planner::ArmTrajectory_<ContainerAllocator1> & lhs, const ::arm_planner::ArmTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_planner::ArmTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_planner::ArmTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_planner::ArmTrajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68689ced2efc48fd92ee34a688a837e9";
  }

  static const char* value(const ::arm_planner::ArmTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68689ced2efc48fdULL;
  static const uint64_t static_value2 = 0x92ee34a688a837e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_planner/ArmTrajectory";
  }

  static const char* value(const ::arm_planner::ArmTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] joint_names\n"
"trajectory_msgs/JointTrajectoryPoint[] points\n"
"geometry_msgs/Pose end_pose\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::arm_planner::ArmTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.points);
      stream.next(m.end_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_planner::ArmTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_planner::ArmTrajectory_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_names: ";
    if (v.joint_names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.joint_names[i]);
    }
    if (v.joint_names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "points: ";
    if (v.points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.points[i]);
    }
    if (v.points.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "end_pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.end_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_PLANNER_MESSAGE_ARMTRAJECTORY_H
